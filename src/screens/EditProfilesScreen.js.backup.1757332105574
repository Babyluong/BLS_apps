// screens/EditProfilesScreen.js
import React, { useEffect, useMemo, useState } from "react";
import { View, Text, StyleSheet, TouchableOpacity, TextInput, ActivityIndicator, FlatList, Alert } from "react-native";
import { MaterialCommunityIcons } from "@expo/vector-icons";
import LuxuryShell from "../components/LuxuryShell";
import supabase from "../services/supabase";

export default function EditProfilesScreen({ onSignOut, onBack }) {
  const [tab, setTab] = useState("peserta"); // peserta | staff
  const [loading, setLoading] = useState(true);
  const [err, setErr] = useState("");
  const [q, setQ] = useState("");
  const [rows, setRows] = useState([]);
  const [hasJobPosition, setHasJobPosition] = useState(false); // detect if profiles.job_position exists

  async function load() {
    setLoading(true); setErr("");
    try {
      if (tab === "peserta") {
        const u = await supabase
          .from("users")
          .select("id, full_name, ic, email, phone_number, tempat_bertugas, jawatan, bls_last_year")
          .order("full_name", { ascending: true });

        if (u.error) throw u.error;
        setRows(Array.isArray(u.data) ? u.data : []);
      } else {
        // Try selecting job_position (preferred); if the column doesn't exist, fall back gracefully.
        const s1 = await supabase
          .from("profiles")
          .select("id, full_name, ic, email, role, job_position")
          .eq("role","staff")
          .order("full_name",{ ascending: true });

        if (!s1.error) {
          setHasJobPosition(true);
          setRows(Array.isArray(s1.data) ? s1.data : []);
        } else {
          // fallback without job_position
          const s2 = await supabase
            .from("profiles")
            .select("id, full_name, ic, email, role")
            .eq("role","staff")
            .order("full_name",{ ascending: true });
          if (s2.error) throw s2.error;
          setHasJobPosition(false);
          // Normalize shape so UI code can read e.job_position safely (null)
          setRows((Array.isArray(s2.data) ? s2.data : []).map(r => ({ ...r, job_position: null })));
        }
      }
    } catch (e) {
      setErr(String(e?.message || e));
      setRows([]);
    } finally {
      setLoading(false);
    }
  }

  useEffect(() => { load(); }, [tab]);

  useEffect(() => {
    const ch = supabase
      .channel("edit_live")
      .on("postgres_changes", {
        event: "*",
        schema: "public",
        table: tab === "peserta" ? "users" : "profiles",
      }, load)
      .subscribe();
    return () => { try { supabase.removeChannel(ch); } catch {} };
  }, [tab]);

  const filtered = useMemo(() => {
    const term = q.trim().toUpperCase();
    if (!term) return rows;
    return rows.filter((r) =>
      [
        r.full_name,
        r.ic,
        r.email,
        r.tempat_bertugas,
        r.jawatan,
        hasJobPosition ? r.job_position : null,
      ]
        .filter(Boolean)
        .map(String)
        .map((s) => s.toUpperCase())
        .some((s) => s.includes(term))
    );
  }, [rows, q, hasJobPosition]);

  const save = async (e) => {
    try {
      if (tab === "peserta") {
        const { error } = await supabase
          .from("users")
          .update({
            full_name: e.full_name,
            ic: e.ic,
            email: e.email || null,
            phone_number: e.phone_number || null,
            tempat_bertugas: e.tempat_bertugas || null,
            jawatan: e.jawatan || null,
            bls_last_year: e.bls_last_year || null,
          })
          .eq("id", e.id);
        if (error) throw error;
      } else {
        // Update staff profile. If job_position column exists, include it; otherwise omit.
        const patch = {
          full_name: e.full_name,
          ic: e.ic,
          email: e.email || null,
        };
        if (hasJobPosition) patch.job_position = e.job_position || null;

        const { error } = await supabase
          .from("profiles")
          .update(patch)
          .eq("id", e.id);
        if (error) throw error;
      }
      Alert.alert("Disimpan", "Kemaskini berjaya.");
      load();
    } catch (er) {
      Alert.alert("Ralat", String(er?.message || er));
    }
  };

  const EditorRow = ({ item }) => {
    const [e, setE] = useState(item);
    const In = (p) => (
      <TextInput
        {...p}
        style={{
          backgroundColor: "rgba(255,255,255,0.06)",
          borderWidth: 1,
          borderColor: "rgba(230,210,150,0.18)",
          borderRadius: 12,
          paddingHorizontal: 10,
          paddingVertical: 8,
          color: "#efe7d2",
          marginTop: 6,
        }}
        placeholderTextColor="#9a917e"
      />
    );
    return (
      <View style={styles.cardRow}>
        <Text style={styles.rowTitle}>{e.full_name || "—"}</Text>
        <In value={e.full_name} onChangeText={(t)=>setE({...e, full_name:t})} placeholder="Nama penuh" />
        <In value={e.ic || ""} onChangeText={(t)=>setE({...e, ic:t})} placeholder="IC" />
        <In value={e.email || ""} onChangeText={(t)=>setE({...e, email:t})} placeholder="Email" />
        {tab === "peserta" ? (
          <>
            <In value={e.phone_number || ""} onChangeText={(t)=>setE({...e, phone_number:t})} placeholder="Telefon" />
            <In value={e.tempat_bertugas || ""} onChangeText={(t)=>setE({...e, tempat_bertugas:t})} placeholder="Tempat bertugas" />
            <In value={e.jawatan || ""} onChangeText={(t)=>setE({...e, jawatan:t})} placeholder="Jawatan" />
            <In
              value={e.bls_last_year ? String(e.bls_last_year) : ""}
              onChangeText={(t)=>setE({...e, bls_last_year: t ? Number(t) : null})}
              placeholder="Tahun BLS"
              keyboardType="number-pad"
            />
          </>
        ) : (
          <>
            {hasJobPosition && (
              <In
                value={e.job_position || ""}
                onChangeText={(t)=>setE({...e, job_position:t})}
                placeholder="Jawatan (staff)"
              />
            )}
          </>
        )}
        <TouchableOpacity onPress={()=>save(e)} style={styles.saveBtn} activeOpacity={0.9}>
          <Text style={{ color: "#1c1710", fontWeight: "900" }}>Simpan</Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <LuxuryShell onSignOut={onSignOut} title="Edit Profiles">
      {/* Back */}
      <TouchableOpacity onPress={onBack} style={styles.backBtn}>
        <MaterialCommunityIcons name="arrow-left" size={22} color="#e9ddc4" />
        <Text style={styles.backText}>Kembali</Text>
      </TouchableOpacity>

      <View style={styles.tabBar}>
        {["peserta","staff"].map((t) => {
          const on = tab === t;
          return (
            <TouchableOpacity key={t} onPress={()=>setTab(t)} style={[styles.tabChip, on && styles.tabChipOn]}>
              <Text style={[styles.tabTxt, on && styles.tabTxtOn]}>{t === "peserta" ? "Peserta" : "Staff"}</Text>
            </TouchableOpacity>
          );
        })}
      </View>

      <View style={styles.searchBox}>
        <MaterialCommunityIcons name="magnify" size={18} color="#e7e3d6" />
        <TextInput
          placeholder="Cari nama / IC / emel…"
          placeholderTextColor="#9a917e"
          value={q}
          onChangeText={setQ}
          style={{ color: "#efe7d2", marginLeft: 8, flex: 1 }}
        />
      </View>

      <View style={styles.cardWrap}>
        {loading ? (
          <View style={{ padding: 18, alignItems: "center" }}>
            <ActivityIndicator />
            <Text style={{ color: "#d7ccb7", marginTop: 8 }}>Memuatkan…</Text>
          </View>
        ) : err ? (
          <Text style={{ color: "#ffb3b3", textAlign: "center", margin: 12 }}>{err}</Text>
        ) : filtered.length === 0 ? (
          <View style={{ padding: 16 }}>
            <Text style={{ color: "#d7ccb7" }}>Tiada rekod.</Text>
          </View>
        ) : (
          <FlatList
            data={filtered}
            keyExtractor={(it)=>String(it.id)}
            renderItem={({ item }) => <EditorRow item={item} />}
            ItemSeparatorComponent={() => <View style={{ height: 10 }} />}
            contentContainerStyle={{ padding: 10 }}
          />
        )}
      </View>
    </LuxuryShell>
  );
}

const styles = StyleSheet.create({
  backBtn: { flexDirection: "row", alignItems: "center", marginBottom: 10 },
  backText: { color: "#e9ddc4", marginLeft: 6, fontWeight: "700" },

  tabBar: { flexDirection: "row", gap: 8, marginBottom: 10 },
  tabChip: { backgroundColor: "rgba(255,255,255,0.06)", borderWidth: 1, borderColor: "rgba(230,210,150,0.18)", borderRadius: 999, paddingHorizontal: 12, paddingVertical: 8 },
  tabChipOn: { backgroundColor: "rgba(230,210,150,0.22)" },
  tabTxt: { color: "#d7ccb7", fontWeight: "800", fontSize: 12 },
  tabTxtOn: { color: "#1c1710" },

  searchBox: { flexDirection: "row", alignItems: "center", backgroundColor: "rgba(255,255,255,0.06)", borderWidth: 1, borderColor: "rgba(230,210,150,0.18)", borderRadius: 12, paddingHorizontal: 10, paddingVertical: 8, minWidth: 260, marginBottom: 12 },

  cardWrap: { borderRadius: 16, borderWidth: 1, borderColor: "rgba(230,210,150,0.18)", backgroundColor: "rgba(18,18,22,0.65)", overflow: "hidden", minHeight: 140 },
  cardRow: { backgroundColor: "rgba(255,255,255,0.06)", borderWidth: 1, borderColor: "rgba(230,210,150,0.18)", borderRadius: 12, padding: 12 },
  rowTitle: { color: "#f5ead1", fontWeight: "900", fontSize: 15 },
  saveBtn: { backgroundColor: "#e9ddc4", borderRadius: 999, paddingHorizontal: 14, paddingVertical: 10, alignSelf: "flex-start", marginTop: 8 },
});
